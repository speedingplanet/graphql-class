type Query {
	# hello(name: String): String!
	# GraphQL expects a "resolver" to provide data for this query
	# hello: String
	# hello(firstName: String): String
	hello(firstName: String): String
	students: [Student]
	studentsWithFilter(filter: StudentFilter!): [Student]!
	studentsWithFields(id: Int, firstName: String, lastName: String, dateOfBirth: String, email: String, phoneNumber: String, city: String, province: String, country: String, postalCode: String): [Student]!
	studentById(id: Int!): Student
}

type Mutation {
	# This is the best option, because it returns the fully created Student object
	addStudent(student: StudentInput!): Student!
	#
	# Just return the new ID value
	# addStudent(student: StudentInput!): Int
	#
	# addStudent(student: StudentInput!): Boolean
	updateStudent(id: Int!, student: StudentInput!): Student
	deleteStudent(id: Int!): Boolean
}

type Student {
	id: Int!
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}

input StudentFilter {
	firstName: String
	lastName: String
	dateOfBirth: String
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}

input StudentInput {
	firstName: String!
	lastName: String!
	dateOfBirth: String!
	email: String
	phoneNumber: String
	city: String
	province: String
	country: String
	postalCode: String
}
