# Add a type for Movie
# Look at data/all-data-typed to see how you would define a Movie
#
# Add a query for movies
# It should not take arguments, but it should return an array of Movies
# Then implement a resolver in resolvers.ts for movies
# Nothing fancy, just return the array of movies from all-data-typed

type Query {
	helloWorld(name: String): String
	movies: [Movie]
	# 1) override movies
	# movies(genre: String)
	#
	# 2) more general movies query
	# movies(criteria: MovieFilter) (pass in something like {genre: 'fantasy', director: 'Peter Jackson'})
	#
	# 3) Specific query implementation
	# moviesByGenre(genre: String!) (required argument)
	# moviesByTitle(title: String!) (required argument)

	# Return values
	# [Movie]   -> null/undefined, empty array, array with one or more movies 
	# [Movie]!  -> empty array, array with one or more movies 
	# [Movie!]  -> null/undefined, array with one or more movies
	# [Movie!]! -> array with one or more movies 
	moviesByGenre(genre: String!): [Movie]!

}

type Movie {
	title: String
	id: Int!
	year: Int
	rating: Int
	genres: [String] 
}